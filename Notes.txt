1.UseState 
+------------
1. creating state 
Simple
based on function(lazy evaluation)

const [ount, setCoutn]= UseState(
    ()=> localStoreage.getItem('count')
)
2.updating function
+__________________
simple way
setCoutn(1000)
Base on current state ( call back function it must be pure and retur next state)
setCoutn((c) => c+1)

Refs
________________
Refs stands for reference  
3 steps
declare the ref( const inputEl= useRef(null))
select the element(ref={inputEl})
use in useeffect

refs persisted across renders
it has has a box named current 

custom hooks are used for reusing the logic across the project
custom hooks allow us to reuse state ful logic among different components
Custom hooks name start with use keyword 
Optional chaining ?.

_________________________________
Class components
__+_+_+_+_____________+________+________________
weather app started using class components 
this keyword is very important

Life cycle methods
________________________________+________________________________
Specials methods used to run side effects
-component did mount(immediately as app loads)

component did update(component re renders) 
-It gives acces to previuos state 

*Component will unmount (cleaning method)

UseEffect solves this issue of spreading of mount and update.

++++_____________________+++++________________________________
React advance Redux started
++++_________________________++++______________________________
UseReducer 
Another powerful way of managing state
Important to understand Redux
Transforming useState to useReducer
useReducer takes the reducer function and initial state as arguments
useReducer takes uses dispatch and action.
useReducer returns the current state and dispatch 
useReducer is avoids confusion and puts all logic in one central place
State is immutable in React


State 
reducer: Pure funtion (no side effect) that takes current state and action, and returns the next state
action  : Object that describes how to update state
dispatch : Function to trigger state updates, by sending actions from event handlers to the reducer.


Advance State Management 
______________________________________
Types of state (accessibility): Local vs global

 1.Local State
  **Needed only by one or few components
  **Only accessible in component and child components
  
 2.Global State
  **Might be needed by many components
  **Accessible to every component in the application 

Types of state (domain) : UI vs remote

 1.Remote State 
  ** All application data loaded form a remote server (APi)
  ** Usually asynchonous
  ** Needs re-fetching + updating

 2.UI State
  ** Everything else
  ** Theme, list filters, form data, etc.
  ** Usually synchronous and stroed in the application. 






